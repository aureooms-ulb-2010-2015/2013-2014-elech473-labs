// ALGORITHM

        //  var mul = function(r1, r2){
        //      var r4r3 = 0;
        // 
        //      for(var i = 0; i < r2; ++i) r4r3 += r1;
        //  };

        //the two input words can be tweaked here
        movi 1, 0x1001 // the first input word
        movi 2, 0x0300 // the second input word

        // r3 LSB, r4 MSB


loop:   beq  2, 0, end
        movi 7, 11
        jalr 7, 7
        addi 2, 2, -1
        beq 0, 0, loop
end:    halt


        // this function adds r1 to r3 and adds the carry bit to r4
        // the return address must be in r7
        // r3, r4, r5 and r6 are modified during the process (they must be saved and restored upon each call if needed)

        // store 0b100... in r5, will be used as a MSb mask
inc:    movi 5, 0x8000
        // store the most significant bit of r1 in r5
        and 5, 1, 5

        // store 0b100... in r6, will be used as a MSb mask
        movi 6, 0x8000
        // store the most significant bit of r3 in r6
        and 6, 3, 6

        // r3 <-- r1 + r3
        add  3, 1, 3

        // 4 different cases :
        //   - r5 == r6 :
        //     - ....... == 0 => there is no overflow for sure
        //     - else         => overflow
        //   - else     :
        //     - MSB(r3) == 0 => overflow
        //     - else         => no overflow


        beq  5, 6, eq

neq:    movi 5, 0x8000 // |
        and  5, 3, 5   // | > store the most significant bit of r3 in r5
        beq  5, 0, nzero
none:   jalr 0, 7 // return address is r7
nzero:  addi 4, 4, 1
        jalr 0, 7 // return address is r7

eq:     beq  5, 0, ezero
eone:   addi 4, 4, 1
ezero:  jalr 0, 7 // return address is r7