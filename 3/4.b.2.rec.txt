

// CONFIG 
        // BASE -> IS[1]
        // ADDITIONAL INSTRUCTIONS -> and, shl
        // OVERFLOW HANDLING -> unsigned integer

// NOTES
        // lshift(A) <=> A <-- 2 * A <=> A <-- A + A <=> add A, A, A
        // r7 is always used as a function return address
        // r6 is always used as the stack pointer
        
// ALGORITHM

        // var multiply(a, b){
        //         if(b == 0) return
        //         else{
        //                 if (b[0] == 0){
        //                         return multiply(a, b >> 1) << 1;
        //                 }
        //                 else{
        //                         return multiply(a, b >> 1) << 1 + a;
        //                 }
        //         }
        // }


// INPUT
        movi 1, 0xffff // the first input word
        movi 2, 0xffff // the second input word

// INIT
        movi 6, 0x0000

// OUTPUT
        movi 3, 0x0000
        movi 4, 0x0000

        movi 7, 14 // REC ADDRESS
        jalr 7, 7
        halt

// REC
        // recursively multiplies r1 by r2 and puts MSB in r4 and LSB in r3
rec:    beq  2, 0, return
        sw   7, 6, 0 // | SAVE CONTEXT
        addi 6, 6, 1 // |
        movi 5, 0x0001  // ----
        and  5, 2, 5    // check if multiplier is odd or even
        beq  5, 0, even // ----
odd:    movi 7, 52 // RSHIFT ADDRESS
        jalr 7, 7
        movi 7, 14 // REC ADDRESS
        jalr 7, 7
        movi 7, 46 // DOUBLE ADDRESS
        jalr 7, 7
        movi 7, 55 // INC ADDRESS
        jalr 7, 7
        beq  0, 0, restor
even:   movi 7, 52 // RSHIFT ADDRESS
        jalr 7, 7
        movi 7, 14 // REC ADDRESS
        jalr 7, 7
        movi 7, 46 // DOUBLE ADDRESS
        jalr 7, 7
restor: addi 6, 6, -1 // |
        lw   7, 6, 0  // | RESTORE CONTEXT
return: jalr 7, 7


// DOUBLE

        // this function doubles the value in r4-r3 handling the carry bit of r3
        // the return address must be in r7
        // r3, r4 and r5 are modified during the process (they must be saved and restored upon each call if needed)

        // store 0b100... in r5, will be used as a MSb mask

double: addi 5, 0, -15 // | (shift constant to get the MSb)
        shl  5, 3, 5   // | store r3 Msb in r5
        add  3, 3, 3   // | double r3
        add  4, 4, 4   // | double r4
        add  4, 4, 5   // | add carry bit
        jalr 7, 7



// RSHIFT

        // this function puts the rshift of r2 in r2, the carry bit is not handled
        // the return address must be in r7
        // r5 is modified during the process (it must be saved and restored upon each call if needed)


rshift: addi 5, 0, -1
        shl  2, 2, 5
        jalr 7, 7



// INC
        // this function adds r1 to r3 and adds the carry bit to r4
        // the return address must be in r7
        // r3 and r4 are modified during the process (they must be saved and restored upon each call if needed)

inc:    add 3, 3, 1, overfl
        jalr 7, 7
overfl: addi 4, 4, 1
        jalr 7, 7