
        // NB : A and B <=> (A nand B) nand (A nand B)
        // lshift(A) <=> A <-- 2 * A <=> A <-- A + A <=> add A, A, A


        //the two input words can be tweaked here
        movi 1, 0x1001 // the first input word
        movi 2, 64 // the second input word

        // r3 LSB, r4 MSB


loop:   beq  2, 0, end
        movi 7, 11
        jalr 7, 7
        addi 2, 2, -1
        beq 0, 0, loop
end:    halt


        // this function adds r1 to r3 and add the carry bit to r4
        // the return address must be in r7
        // r3, r4, r5 and r6 are modified during the process (they must be saved and restored upon each call if needed)

        // NB : A and B <=> (A nand B) nand (A nand B)

        // store 0b100... in r6, will be used as a MSb mask
addca:  movi 6, 0x8000
        // store the most significant bit of r1 in r5
        nand 5, 1, 6
        nand 5, 5, 5

        // store the most significant bit of r3 in r6
        nand 6, 3, 6
        nand 6, 6, 6

        // r3 <-- r1 + r3
        add  3, 1, 3

        // 4 different cases :
        //   - r5 == r6 :
        //     - ....... == 0 => there is no overflow for sure
        //     - else         => overflow
        //   - else     :
        //     - MSB(r3) == 0 => overflow
        //     - else         => no overflow


        beq  5, 6, eq

neq:    movi 5, 0x8000 // |
        nand 5, 3, 5   // |store the most significant bit of r3 in r5
        nand 5, 5, 5   // |
        beq  5, 0, nzero
none:   jalr 0, 7 // return address is r7
nzero:  addi 4, 4, 1
        jalr 0, 7 // return address is r7

eq:     beq  5, 0, ezero
eone:   addi 4, 4, 1
ezero:  jalr 0, 7 // return address is r7





        // this function puts the rshift of r2 in r2, the carry bit is not handled
        // the return address must be in r7
        // r5 is modified during the process (they must be saved and restored upon each call if needed)

        // NB : A and B <=> (A nand B) nand (A nand B)

rshift: movi 5, 0x0001
        nand 5, 2, 5    // | get bit at pos 0
        addi 5, 5, 1    // | 2's complement
        add  2, 2, 5    // | set bit at pos 0 to 0 


        movi 5, 0x0002      
        nand 5, 2, 5    // | get bit at pos 1
        nand 5, 5, 5    // | ----------------
        beq, 5, 0, 5    // | if 0 skip
        nand 5, 5, 5    // | else \
        addi 5, 5, 1    // | 2's complement
        add  2, 2, 5    // | 
        movi 5, 0x0001  // | 
        add  2, 2, 5    // |       --> add bit shifted to r6

        movi 5, 0x0004      
        nand 5, 2, 5    // | get bit at pos 2
        nand 5, 5, 5    // | ----------------
        beq, 5, 0, 5    // | if 0 skip
        nand 5, 5, 5    // | else \
        addi 5, 5, 1    // | 2's complement
        add  2, 2, 5    // | 
        movi 5, 0x0002  // |
        add  2, 2, 5    // |       --> add bit shifted to r6

        movi 5, 0x0008      
        nand 5, 2, 5    // | get bit at pos 3
        nand 5, 5, 5    // | ----------------
        beq, 5, 0, 5    // | if 0 skip
        nand 5, 5, 5    // | else \
        addi 5, 5, 1    // | 2's complement
        add  2, 2, 5    // | 
        movi 5, 0x0004  // |
        add  2, 2, 5    // |       --> add bit shifted to r6

        movi 5, 0x0010      
        nand 5, 2, 5    // | get bit at pos 4
        nand 5, 5, 5    // | ----------------
        beq, 5, 0, 5    // | if 0 skip
        nand 5, 5, 5    // | else \
        addi 5, 5, 1    // | 2's complement
        add  2, 2, 5    // | 
        movi 5, 0x0008  // |
        add  2, 2, 5    // |       --> add bit shifted to r6

        movi 5, 0x0020      
        nand 5, 2, 5    // | get bit at pos 5
        nand 5, 5, 5    // | ----------------
        beq, 5, 0, 5    // | if 0 skip
        nand 5, 5, 5    // | else \
        addi 5, 5, 1    // | 2's complement
        add  2, 2, 5    // | 
        movi 5, 0x0010  // |
        add  2, 2, 5    // |       --> add bit shifted to r6

        movi 5, 0x0040      
        nand 5, 2, 5    // | get bit at pos 6
        nand 5, 5, 5    // | ----------------
        beq, 5, 0, 5    // | if 0 skip
        nand 5, 5, 5    // | else \
        addi 5, 5, 1    // | 2's complement
        add  2, 2, 5    // | 
        movi 5, 0x0020  // |
        add  2, 2, 5    // |       --> add bit shifted to r6

        movi 5, 0x0080      
        nand 5, 2, 5    // | get bit at pos 7
        nand 5, 5, 5    // | ----------------
        beq, 5, 0, 5    // | if 0 skip
        nand 5, 5, 5    // | else \
        addi 5, 5, 1    // | 2's complement
        add  2, 2, 5    // | 
        movi 5, 0x0040  // |
        add  2, 2, 5    // |       --> add bit shifted to r6

        movi 5, 0x0100      
        nand 5, 2, 5    // | get bit at pos 8
        nand 5, 5, 5    // | ----------------
        beq, 5, 0, 5    // | if 0 skip
        nand 5, 5, 5    // | else \
        addi 5, 5, 1    // | 2's complement
        add  2, 2, 5    // | 
        movi 5, 0x0080  // |
        add  2, 2, 5    // |       --> add bit shifted to r6

        movi 5, 0x0200      
        nand 5, 2, 5    // | get bit at pos 9
        nand 5, 5, 5    // | ----------------
        beq, 5, 0, 5    // | if 0 skip
        nand 5, 5, 5    // | else \
        addi 5, 5, 1    // | 2's complement
        add  2, 2, 5    // | 
        movi 5, 0x0100  // |
        add  2, 2, 5    // |       --> add bit shifted to r6

        movi 5, 0x0400      
        nand 5, 2, 5    // | get bit at pos 10
        nand 5, 5, 5    // | ----------------
        beq, 5, 0, 5    // | if 0 skip
        nand 5, 5, 5    // | else \
        addi 5, 5, 1    // | 2's complement
        add  2, 2, 5    // | 
        movi 5, 0x0200  // |
        add  2, 2, 5    // |       --> add bit shifted to r6

        movi 5, 0x0800      
        nand 5, 2, 5    // | get bit at pos 11
        nand 5, 5, 5    // | ----------------
        beq, 5, 0, 5    // | if 0 skip
        nand 5, 5, 5    // | else \
        addi 5, 5, 1    // | 2's complement
        add  2, 2, 5    // | 
        movi 5, 0x0400  // |
        add  2, 2, 5    // |       --> add bit shifted to r6

        movi 5, 0x1000      
        nand 5, 2, 5    // | get bit at pos 12
        nand 5, 5, 5    // | ----------------
        beq, 5, 0, 5    // | if 0 skip
        nand 5, 5, 5    // | else \
        addi 5, 5, 1    // | 2's complement
        add  2, 2, 5    // | 
        movi 5, 0x0800  // |
        add  2, 2, 5    // |       --> add bit shifted to r6

        movi 5, 0x2000      
        nand 5, 2, 5    // | get bit at pos 13
        nand 5, 5, 5    // | ----------------
        beq, 5, 0, 5    // | if 0 skip
        nand 5, 5, 5    // | else \
        addi 5, 5, 1    // | 2's complement
        add  2, 2, 5    // | 
        movi 5, 0x1000  // |
        add  2, 2, 5    // |       --> add bit shifted to r6

        movi 5, 0x4000      
        nand 5, 2, 5    // | get bit at pos 14
        nand 5, 5, 5    // | ----------------
        beq, 5, 0, 5    // | if 0 skip
        nand 5, 5, 5    // | else \
        addi 5, 5, 1    // | 2's complement
        add  2, 2, 5    // | 
        movi 5, 0x2000  // |
        add  2, 2, 5    // |       --> add bit shifted to r6

        movi 5, 0x8000      
        nand 5, 2, 5    // | get bit at pos 15
        nand 5, 5, 5    // | ----------------
        beq, 5, 0, 5    // | if 0 skip
        nand 5, 5, 5    // | else \
        addi 5, 5, 1    // | 2's complement
        add  2, 2, 5    // | 
        movi 5, 0x4000  // |
        add  2, 2, 5    // |       --> add bit shifted to r6

        jalr 0, 7